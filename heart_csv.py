# -*- coding: utf-8 -*-
"""Heart  csv

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y7Wc2mbMb7EIVSNBYEDP8hdl1u0AMU01
"""

import pandas as pd

import numpy as np

import matplotlib.pyplot as plt

import seaborn as sns

from sklearn.model_selection import train_test_split

df=pd.read_csv("/content/sample_data/heart.csv,.csv")

df.head()

df.info()

df.info()

df.describe()

df.columns

df.hist(figsize=(10,10))
plt.show()

df.isnull().sum()

df.isnull()

df.info()



corr_matrix = df.corr()
plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap of Heart Disease Dataset')
plt.show()



"""# Task
Implement and evaluate an SVM algorithm using the data in "data.csv".

## Prepare data

### Subtask:
Define features (X) and target variable (y), then split the data into training and testing sets.

**Reasoning**:
Define features (X) and target variable (y) and then split the data into training and testing sets as per the instructions.
"""

X = df.drop('target', axis=1)
y = df['target']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

"""## Scale features

### Subtask:
Scale the features using a StandardScaler.

**Reasoning**:
Scale the features using StandardScaler to prepare the data for the SVM algorithm.
"""

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""## Train svm model

### Subtask:
Train an SVM classifier on the scaled training data.

**Reasoning**:
Train an SVM classifier on the scaled training data.
"""

from sklearn.svm import SVC
svm_model = SVC()
svm_model.fit(X_train_scaled, y_train)

"""## Make predictions

### Subtask:
Make predictions on the scaled test data.

**Reasoning**:
Use the trained SVM model to make predictions on the scaled test data and store them in a new variable.
"""

y_pred = svm_model.predict(X_test_scaled)

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.4f}")
print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1-score: {f1:.4f}")

_ = sns.pairplot(df, hue="target")

df.info()

